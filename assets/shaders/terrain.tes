#version 430 core

layout (quads, fractional_odd_spacing) in;

uniform sampler2D tex_displacement;
uniform sampler2D tex_normal;

uniform mat4 mvp;
uniform mat4 mv;
uniform float dmap_depth;
uniform float Time;


in TCS_OUT
{
    vec2 tc;
} tes_in[];

out TES_OUT
{
    vec3 CameraSpaceNormal;
    vec2 tc;
} tes_out;

vec3 GetNormal( vec3 p, vec3 p1, vec3 p2)
{
    vec3 a = vec3(p - p1);
    vec3 b = vec3(p2 - p1);
    return normalize(cross(a, b));
}

void main(void)
{
    vec2 tc1 = mix(tes_in[0].tc, tes_in[1].tc, gl_TessCoord.x);
    vec2 tc2 = mix(tes_in[2].tc, tes_in[3].tc, gl_TessCoord.x);
    vec2 tc = mix(tc2, tc1, gl_TessCoord.y);

    vec4 p1 = mix(gl_in[0].gl_Position,
                  gl_in[1].gl_Position,
                  gl_TessCoord.x);
    vec4 p2 = mix(gl_in[2].gl_Position,
                  gl_in[3].gl_Position,
                  gl_TessCoord.x);
    vec4 p = mix(p2, p1, gl_TessCoord.y);

    p.y += texture(tex_displacement, tc).r * Time * dmap_depth;

	vec3 n = texture(tex_normal, tc).xyz ;
	n = vec3(0.f, 1.f, 0.f) + (Time)*n;
	tes_out.CameraSpaceNormal = vec3(mv * vec4(n, 0.0));;
	
    gl_Position = mvp * p;
    tes_out.tc = tc;
	
}